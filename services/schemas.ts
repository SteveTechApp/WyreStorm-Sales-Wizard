import { Type } from "@google/genai";
import { UnitSystem } from "../utils/types";

export const proposalGenerationSchema = {
    type: Type.OBJECT,
    properties: {
        executiveSummary: { type: Type.STRING, description: "A high-level overview of the proposed solution, written for a non-technical executive." },
        scopeOfWork: { type: Type.STRING, description: "A detailed description of what will be delivered, including key features and functionality for each room." },
        equipmentList: {
            type: Type.ARRAY,
            description: "A list of all required equipment with SKU, name, quantity, and pricing.",
            items: {
                type: Type.OBJECT,
                properties: {
                    sku: { type: Type.STRING },
                    name: { type: Type.STRING },
                    quantity: { type: Type.INTEGER },
                    dealerPrice: { type: Type.NUMBER },
                    msrp: { type: Type.NUMBER },
                }
            }
        },
        installationPlan: {
            type: Type.ARRAY,
            description: "A list of installation tasks with descriptions and estimated hours.",
            items: {
                type: Type.OBJECT,
                properties: {
                    task: { type: Type.STRING },
                    description: { type: Type.STRING },
                    hours: { type: Type.NUMBER },
                }
            }
        },
        systemDiagram: {
            type: Type.OBJECT,
            description: "A structured representation of the system diagram, built from the final equipment list.",
            properties: {
                nodes: {
                    type: Type.ARRAY,
                    items: {
                        type: Type.OBJECT,
                        properties: { id: { type: Type.STRING }, label: { type: Type.STRING }, type: { type: Type.STRING }, group: { type: Type.STRING } }
                    }
                },
                edges: {
                    type: Type.ARRAY,
                    items: {
                        type: Type.OBJECT,
                        properties: {
                            from: { type: Type.STRING },
                            to: { type: Type.STRING },
                            label: { type: Type.STRING },
                            type: { type: Type.STRING, description: "Can be one of: 'video', 'audio', 'control', 'usb', 'network'" }
                        }
                    }
                },
                groups: {
                    type: Type.ARRAY,
                    description: "An ordered list of group names for layout, e.g., ['Sources', 'Table', 'Rack', 'Display'].",
                    items: { type: Type.STRING }
                }
            }
        },
        siteRequirements: {
            type: Type.ARRAY,
            description: "A list of prerequisites the client must provide (e.g., power, network ports).",
            items: { type: Type.STRING }
        },
        furtherResources: {
            type: Type.STRING,
            description: "A markdown-formatted section with links to the WyreStorm Academy and relevant YouTube videos."
        }
    }
};

export const inspiredRoomDesignSchema = (unitSystem: UnitSystem) => ({
    type: Type.OBJECT,
    properties: {
        roomName: { type: Type.STRING },
        roomType: { type: Type.STRING },
        designTier: { type: Type.STRING },
        maxParticipants: { type: Type.INTEGER },
        functionalityStatement: { type: Type.STRING },
        features: {
            type: Type.ARRAY,
            items: {
                type: Type.OBJECT,
                properties: {
                    name: { type: Type.STRING },
                    priority: { type: Type.STRING, description: "Can be one of: 'must-have', 'nice-to-have'" }
                }
            }
        },
        dimensions: {
            type: Type.OBJECT,
            description: `Room dimensions in ${unitSystem}.`,
            properties: {
                length: { type: Type.NUMBER },
                width: { type: Type.NUMBER },
                height: { type: Type.NUMBER },
            }
        },
        manuallyAddedEquipment: {
            type: Type.ARRAY,
            items: {
                type: Type.OBJECT,
                properties: {
                    sku: { type: Type.STRING },
                    name: { type: Type.STRING },
                    quantity: { type: Type.INTEGER },
                    isAiGenerated: { type: Type.BOOLEAN, description: "Set to true for all equipment generated by this template." },
                    dealerPrice: { type: Type.NUMBER, description: "The dealer price for the item, looked up from the product database."}
                },
                required: ['sku', 'name', 'quantity', 'isAiGenerated', 'dealerPrice']
            }
        },
        requiredResolution: { type: Type.STRING, description: "Can be one of: '1080p', '4K30', '4K60'" },
        hdrRequirements: { type: Type.STRING, description: "Can be one of: 'None', 'HDR10', 'Dolby Vision'" },
        hdbasetStandard: { type: Type.STRING, description: "Can be one of: 'Auto', '2.0', '3.0'" },
    }
});